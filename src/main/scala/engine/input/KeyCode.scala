package engine.input

/** Enum for keyboard key codes.
  *
  * @param code
  *   The key's corresponding GLFW keyboard key code.
  */
enum KeyCode(val code: Int, val name: String) extends Pressable(code, name) {
  case unknown extends KeyCode(-1, "unknown")
  case space extends KeyCode(32, "space")
  case apostrophe extends KeyCode(39, "apostrophe")
  case comma extends KeyCode(44, "comma")
  case minus extends KeyCode(45, "minus")
  case period extends KeyCode(46, "period")
  case slash extends KeyCode(47, "slash")
  case key_0 extends KeyCode(48, "0")
  case key_1 extends KeyCode(49, "1")
  case key_2 extends KeyCode(50, "2")
  case key_3 extends KeyCode(51, "3")
  case key_4 extends KeyCode(52, "4")
  case key_5 extends KeyCode(53, "5")
  case key_6 extends KeyCode(54, "6")
  case key_7 extends KeyCode(55, "7")
  case key_8 extends KeyCode(56, "8")
  case key_9 extends KeyCode(57, "9")
  case semicolon extends KeyCode(59, "semicolon")
  case equal extends KeyCode(61, "equal")
  case a extends KeyCode(65, "A")
  case b extends KeyCode(66, "B")
  case c extends KeyCode(67, "C")
  case d extends KeyCode(68, "D")
  case e extends KeyCode(69, "E")
  case f extends KeyCode(70, "F")
  case g extends KeyCode(71, "G")
  case h extends KeyCode(72, "H")
  case i extends KeyCode(73, "I")
  case j extends KeyCode(74, "J")
  case k extends KeyCode(75, "K")
  case l extends KeyCode(76, "L")
  case m extends KeyCode(77, "M")
  case n extends KeyCode(78, "N")
  case o extends KeyCode(79, "O")
  case p extends KeyCode(80, "P")
  case q extends KeyCode(81, "Q")
  case r extends KeyCode(82, "R")
  case s extends KeyCode(83, "S")
  case t extends KeyCode(84, "T")
  case u extends KeyCode(85, "U")
  case v extends KeyCode(86, "V")
  case w extends KeyCode(87, "W")
  case x extends KeyCode(88, "X")
  case y extends KeyCode(89, "Y")
  case z extends KeyCode(90, "Z")
  case left_bracket extends KeyCode(91, "left_bracket")
  case backslash extends KeyCode(92, "backslash")
  case right_bracket extends KeyCode(93, "right_bracket")
  case grave_accent extends KeyCode(96, "grave_accent")
  case world_1 extends KeyCode(161, "world_1")
  case world_2 extends KeyCode(162, "world_2")
  case escape extends KeyCode(256, "escape")
  case enter extends KeyCode(257, "enter")
  case tab extends KeyCode(258, "tab")
  case backspace extends KeyCode(259, "backspace")
  case insert extends KeyCode(260, "insert")
  case delete extends KeyCode(261, "delete")
  case right extends KeyCode(262, "right")
  case left extends KeyCode(263, "left")
  case down extends KeyCode(264, "down")
  case up extends KeyCode(265, "up")
  case page_up extends KeyCode(266, "page_up")
  case page_down extends KeyCode(267, "page_down")
  case home extends KeyCode(268, "home")
  case end extends KeyCode(269, "end")
  case caps_lock extends KeyCode(280, "caps_lock")
  case scroll_lock extends KeyCode(281, "scroll_lock")
  case num_lock extends KeyCode(282, "num_lock")
  case print_screen extends KeyCode(283, "print_screen")
  case pause extends KeyCode(284, "pause")
  case F1 extends KeyCode(290, "F1")
  case F2 extends KeyCode(291, "F2")
  case F3 extends KeyCode(292, "F3")
  case F4 extends KeyCode(293, "F4")
  case F5 extends KeyCode(294, "F5")
  case F6 extends KeyCode(295, "F6")
  case F7 extends KeyCode(296, "F7")
  case F8 extends KeyCode(297, "F8")
  case F9 extends KeyCode(298, "F9")
  case F10 extends KeyCode(299, "F10")
  case F11 extends KeyCode(300, "F11")
  case F12 extends KeyCode(301, "F12")
  case F13 extends KeyCode(302, "F13")
  case F14 extends KeyCode(303, "F14")
  case F15 extends KeyCode(304, "F15")
  case F16 extends KeyCode(305, "F16")
  case F17 extends KeyCode(306, "F17")
  case F18 extends KeyCode(307, "F18")
  case F19 extends KeyCode(308, "F19")
  case F20 extends KeyCode(309, "F20")
  case F21 extends KeyCode(310, "F21")
  case F22 extends KeyCode(311, "F22")
  case F23 extends KeyCode(312, "F23")
  case F24 extends KeyCode(313, "F24")
  case F25 extends KeyCode(314, "F25")
  case numpad_0 extends KeyCode(320, "numpad_0")
  case numpad_1 extends KeyCode(321, "numpad_1")
  case numpad_2 extends KeyCode(322, "numpad_2")
  case numpad_3 extends KeyCode(323, "numpad_3")
  case numpad_4 extends KeyCode(324, "numpad_4")
  case numpad_5 extends KeyCode(325, "numpad_5")
  case numpad_6 extends KeyCode(326, "numpad_6")
  case numpad_7 extends KeyCode(327, "numpad_7")
  case numpad_8 extends KeyCode(328, "numpad_8")
  case numpad_9 extends KeyCode(329, "numpad_9")
  case numpad_decimal extends KeyCode(330, "numpad_decimal")
  case numpad_divide extends KeyCode(331, "numpad_divide")
  case numpad_multiply extends KeyCode(332, "numpad_multiply")
  case numpad_subtract extends KeyCode(333, "numpad_subtract")
  case numpad_add extends KeyCode(334, "numpad_add")
  case numpad_enter extends KeyCode(335, "numpad_enter")
  case numpad_equal extends KeyCode(336, "numpad_equal")
  case left_shift extends KeyCode(340, "left_shift")
  case left_control extends KeyCode(341, "left_control")
  case left_alt extends KeyCode(342, "left_alt")
  case left_super extends KeyCode(343, "left_super")
  case right_shift extends KeyCode(344, "right_shift")
  case right_control extends KeyCode(345, "right_control")
  case right_alt extends KeyCode(346, "right_alt")
  case right_super extends KeyCode(347, "right_super")
  case menu extends KeyCode(348, "menu")
}

object KeyCode {

  /** Returns the `KeyCode` enum value for the given key code.
    *
    * @param code:
    *   The key's corresponding GLFW keyboard key code.
    * @return
    *   The enum value for the given key code.
    */
  def from(code: Int): KeyCode =
    KeyCode.values
      .find(_.code == code)
      .getOrElse(KeyCode.unknown)
}
